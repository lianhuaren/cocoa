//
//  AudioInfoResp.swift
//
//  This file is auto generated by fit.
//  Github: https://github.com/AnyOptional/fit
//
//  Copyright © 2018-present Archer. All rights reserved.
//

import YYKit
import AudioService

@objcMembers
class AudioInfoResp: NSObject, YYModel {
    
    var error_code: Int = 0
    var songinfo: SonginfoBean?
    
    @objcMembers
    class SonginfoBean: NSObject, YYModel {
        var pic_big: String?
        var all_rate: String?
        var havehigh: Int = 0
        var album_id: String?
        var bitrate_fee: String?
        var si_proxycompany: String?
        var is_first_publish: Int = 0
        var artist_id: String?
        var special_type: Int = 0
        var play_type: Int = 0
        var song_id: String?
        var all_artist_ting_uid: String?
        var title: String?
        var toneid: String?
        var copy_type: String?
        var album_no: String?
        var piao_id: String?
        var lrclink: String?
        var has_mv_mobile: Int = 0
        var resource_type: String?
        var pic_huge: String?
        var song_source: String?
        var learn: Int = 0
        var album_title: String?
        var author: String?
        var relate_status: String?
        var charge: Int = 0
        var pic_small: String?
        var pic_premium: String?
        var all_artist_id: String?
        var resource_type_ext: String?
        var ting_uid: String?
        var pic_radio: String?
        var korean_bb_song: String?
        var has_mv: Int = 0
    }
    
    var bitrate: BitrateBean?
    
    @objcMembers
    class BitrateBean: NSObject, YYModel {
        var show_link: String?
        var file_extension: String?
        var file_link: String?
        var file_size: Int = 0
        var free: Int = 0
        var hash_value: String?
        var song_file_id: Int = 0
        var file_bitrate: Int = 0
        var file_duration: Int = 0
        
        static func modelCustomPropertyMapper() -> [String : Any]? {
            return ["hash_value" : "hash"]
        }
    }
    
}

extension AudioInfoResp {
    // 转成MusicInfo
    public func toMusicInfo() -> MusicInfo? {
        guard let musicName = songinfo?.title, musicName.isNotBlank else { return nil }
        guard let url = URL(string: (bitrate?.file_link).filterNil()) else { return nil }
        let info = MusicInfo(soundURLs: [.medium : url])
        info?.musicId = songinfo?.song_id
        info?.picUrl = (songinfo?.pic_radio).filterBlank((songinfo?.pic_big).filterNil())
        info?.lrcUrl = songinfo?.lrclink
        info?.musicName = musicName
        info?.singerName = songinfo?.author
        return info
    }
}
